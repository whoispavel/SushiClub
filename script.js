console.log('=== START OF JS ===');
// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ JS-–ø–æ–º–∏–ª–æ–∫
window.addEventListener('error', function(e) {
  console.error('GLOBAL JS ERROR:', e.message, e);
});
window.addEventListener('unhandledrejection', function(e) {
  console.error('GLOBAL PROMISE ERROR:', e.reason, e);
});

// --- –¢–µ—Å—Ç–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ Telegram ---
const TELEGRAM_BOT_TOKEN = '8007889504:AAESFASDeT0njLEczDDpO__vENkVJd5d340';
const TELEGRAM_CHAT_ID = '7364136001';

async function sendToTelegram({ phone, email, message, timestamp, source }) {
    console.log('üì§ sendToTelegram –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ –¥–∞–Ω–∏–º–∏:', { phone, email, message, timestamp, source });
    
    const text = `\nüìû –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫\n-------------------------\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nEmail: ${email || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n–ö–æ–º–µ–Ω—Ç–∞—Ä: ${message || '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}\n–ß–∞—Å: ${timestamp || new Date().toLocaleString('uk-UA')}\n–î–∂–µ—Ä–µ–ª–æ: ${source || 'Sushi Club Website'}`.trim();

    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    console.log('üåê URL –¥–ª—è –∑–∞–ø–∏—Ç—É:', url);

    try {
        console.log('üì° –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ fetch –∑–∞–ø–∏—Ç...');
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: text,
                parse_mode: 'HTML'
            })
        });

        console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —Å—Ç–∞—Ç—É—Å:', response.status);
        const data = await response.json();
        console.log('üìã –í—ñ–¥–ø–æ–≤—ñ–¥—å Telegram:', data);

        if (!data.ok) {
            throw new Error(data.description || '–ü–æ–º–∏–ª–∫–∞ Telegram API');
        }

        return true;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// --- –î–æ–¥–∞—é —Ç–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏ –∑ id='test-form' ---
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded!');
    const testForm = document.getElementById('test-form');
    if (testForm) {
        console.log('test-form –∑–Ω–∞–π–¥–µ–Ω–æ!');
        testForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const phone = document.getElementById('phone').value;
            const email = document.getElementById('email').value;
            const message = document.getElementById('message').value;
            console.log('üéØ –¢–µ—Å—Ç–æ–≤–∞ —Ñ–æ—Ä–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!');
            const result = await sendToTelegram({
                phone: phone,
                email: email,
                message: message,
                timestamp: new Date().toLocaleString('uk-UA'),
                source: '–¢–µ—Å—Ç–æ–≤–∞ —Ñ–æ—Ä–º–∞'
            });
            const resultDiv = document.getElementById('result');
            if (resultDiv) {
                resultDiv.innerHTML = result ? 
                    '<p style="color: green;">‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</p>' : 
                    '<p style="color: red;">‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏</p>';
            }
        });
    } else {
        console.log('test-form –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ!');
    }
});

console.log('=== END OF JS ===');

// --- Callback Widget Logic ---
document.addEventListener('DOMContentLoaded', function() {
    // –í—ñ–¥–∂–µ—Ç –¥–∑–≤—ñ–Ω–∫–∞
    const callbackBtn = document.getElementById('callback-btn');
    const callbackForm = document.getElementById('callback-form');
    const closeCallback = document.getElementById('close-callback');
    const callbackWidget = document.getElementById('callback-widget');
    const callbackFormData = document.getElementById('callback-form-data');
    const callbackSuccess = document.getElementById('callback-success');

    if (callbackBtn && callbackForm && closeCallback) {
        callbackBtn.addEventListener('click', function() {
            callbackForm.classList.add('active');
        });
        closeCallback.addEventListener('click', function() {
            callbackForm.classList.remove('active');
        });
        // –ö–ª—ñ–∫ –ø–æ–∑–∞ —Ñ–æ—Ä–º–æ—é –∑–∞–∫—Ä–∏–≤–∞—î —ó—ó
        document.addEventListener('mousedown', function(e) {
            if (callbackForm.classList.contains('active') && !callbackForm.contains(e.target) && !callbackBtn.contains(e.target)) {
                callbackForm.classList.remove('active');
            }
        });
    }

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞
    if (callbackFormData) {
        callbackFormData.addEventListener('submit', async function(e) {
            e.preventDefault();
            const phone = document.getElementById('callback-phone').value;
            const email = document.getElementById('callback-email').value;
            const message = document.getElementById('callback-message').value;
            const result = await sendToTelegram({
                phone: phone,
                email: email,
                message: message,
                timestamp: new Date().toLocaleString('uk-UA'),
                source: 'Callback Widget'
            });
            if (result) {
                callbackFormData.style.display = 'none';
                callbackSuccess.style.display = 'block';
                setTimeout(() => {
                    callbackForm.classList.remove('active');
                    callbackFormData.style.display = '';
                    callbackSuccess.style.display = 'none';
                    callbackFormData.reset();
                }, 2500);
            } else {
                callbackSuccess.style.display = 'block';
                callbackSuccess.innerHTML = '<p style="color:red;">‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.</p>';
                setTimeout(() => {
                    callbackSuccess.style.display = 'none';
                    callbackSuccess.innerHTML = '<p>‚úì –î—è–∫—É—î–º–æ! –ú–∏ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.</p>';
                }, 2500);
            }
        });
    }
});